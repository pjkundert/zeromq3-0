zmq_subs(3)
===========


NAME
----
zmq_subs - detect if socket has listeners ready to be sent message


SYNOPSIS
--------
*int zmq_subs (void '*socket', const void '*buf', size_t 'len');*


DESCRIPTION
-----------
The _zmq_subs()_ function shall determine if any subscribers are
willing and able to receive a message beginning with the message
filter specified by the 'buf' and 'len' arguments.

For ZMQ_PUB and ZMQ_XPUB sockets, the message filter is checked
against all of the message filters registered by all connected ZMQ_SUB
and ZMQ_XSUB sockets.  If no sockets have subscribed using a
corresponding message filter, then zero is returned.

For all sockets, if the message would be dropped due to no sockets
being able to accept the message, a zero is also returned.

A 1 is returned if both the subscriber message filter matches, and
sockets are ready to receive a message.


RETURN VALUE
------------
The _zmq_subs()_ function shall return zero or 1 if successful. Otherwise it shall
return `-1` and set 'errno' to one of the values defined below.


ERRORS
------
*EINVAL*::
The endpoint supplied is invalid.
*EPROTONOSUPPORT*::
The requested 'transport' protocol is not supported.
*ENOCOMPATPROTO*::
The requested 'transport' protocol is not compatible with the socket type.
*EADDRINUSE*::
The requested 'address' is already in use.
*EADDRNOTAVAIL*::
The requested 'address' was not local.
*ENODEV*::
The requested 'address' specifies a nonexistent interface.
*ETERM*::
The 0MQ 'context' associated with the specified 'socket' was terminated.
*ENOTSOCK*::
The provided 'socket' was invalid.
*EMTHREAD*::
No I/O thread is available to accomplish the task.


EXAMPLE
-------
.Testing whether a publisher socket has any listeners for a message filter
----
/* Create a ZMQ_PUB socket */
void *socket = zmq_socket (context, ZMQ_PUB);
assert (socket);
/* ...
 * later, we want to decide whether to create and send a certain messagae
 * ...
 */
if (zmq_subs (socket, "EXPENSIVE", 9)) {
    /* There are listeners! */
    zmq_msg_t msg;
    /* ... Create "EXPENSIVE" msg. */
    zmq_sendmsg (socket, &msg, 0)
}
----


SEE ALSO
--------
linkzmq:zmq_getsockopt[3]


AUTHORS
-------
This man page was written by Perry Kundert <perry@kundert.ca>.
